version: '3.8'

services:
  # Application service for production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ccdcca2-app-prod
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - ./.env.production
    volumes:
      # Mount logs directory for persistence in production
      - ./logs:/app/logs
      # Optional: Mount custom SSL certificates if needed
      # - ./certs:/app/certs:ro
    networks:
      - ccdcca2-prod-network
    restart: unless-stopped
    
    # Production health check with longer intervals
    healthcheck:
      test: ["CMD", "node", "-e", "const http=require('http');http.get('http://localhost:3000/health',(r)=>{process.exit(r.statusCode===200?0:1)})"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem for security
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=50m

  # Optional: Reverse proxy/load balancer for production
  # Uncomment if you want to use nginx as a reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: ccdcca2-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./certs:/etc/nginx/certs:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - ccdcca2-prod-network
  #   restart: unless-stopped

networks:
  ccdcca2-prod-network:
    driver: bridge

# Optional: Use named volumes for production data persistence
volumes:
  prod_logs:
    driver: local
